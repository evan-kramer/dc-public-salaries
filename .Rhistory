scale_y_continuous(
name = "Count",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
)
)
ggplot(feedback, aes(`Right Priorities`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Count",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = 0:10
)
seq(0, 10, 2)
ggplot(feedback, aes(`Right Priorities`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Count",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = seq(0, 10, 2)
)
ggplot(feedback, aes(`Right Priorities`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Count",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = seq(0, 10, 2)
) +
xlab("Are these the right priorities?") +
ylab("Count")
ggplot(feedback, aes(`Right Priorities`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Count",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = seq(0, 10, 2)
) +
xlab("Are these the right priorities?") +
ylab("Number of Responses")
# Testing Smartsheet API
# Evan Kramer
# Attach packages
options(java.parameters = "-Xmx16G")
library(tidyverse)
library(lubridate)
library(httr)
library(rjson)
library(odbc)
library(rvest)
library(xml2)
library(XML)
library(jsonlite)
library(data.table)
library(googlesheets4)
ss_api_key = readRegistry("Environment", hive = "HCU")$smartsheet_api_key
ss_api_pwd = readRegistry("Environment", hive = "HCU")$smartsheet_pwd
qb_api_key = readRegistry("Environment", hive = "HCU")$quickbase_api_key
qb_api_pwd = readRegistry("Environment", hive = "HCU")$quickbase_pwd
qb_api_app = readRegistry("Environment", hive = "HCU")$quickbase_api_token
qb_url = readRegistry("Environment", hive = "HCU")$quickbase_api_url
api_uid = readRegistry("Environment", hive = "HCU")$email_address
# Analysis of team meeting feedback
feedback = read_sheet(
ss = "https://docs.google.com/spreadsheets/d/1vApMh95knR2RAGxdHJvsqKCLRK7RLK3HxcwhJE3d8CU/edit#gid=2030972886",
sheet = 1
) %>%
filter(!is.na(`Right Priorities`))
ggplot(feedback, aes(`Right Priorities`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Count",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = seq(0, 10, 2)
) +
xlab("Are these the right priorities?") +
ylab("Number of Responses")
ggplot(feedback, aes(`Right Priorities`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Number of Responses",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = seq(0, 10, 2)
) +
xlab("Are these the right priorities?")
ls()
feedback
names(feedback)
# Which priorities do folks want to focus on?
ggplot(feedback, aes(`Priority Focus Area`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Number of Responses",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = seq(0, 10, 2)
) +
xlab("Priority")
# Which priorities do folks want to focus on?
ggplot(feedback, aes(`Priority Focus Area`)) +
geom_bar(stat = "count") +
theme_bw() +
scale_y_continuous(
name = "Number of Responses",
limits = c(
min(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
),
max(
sum(feedback$`Right Priorities` == "Yes"),
sum(feedback$`Right Priorities` == "No"),
sum(feedback$`Right Priorities` == "Maybe")
)
),
breaks = seq(0, 10, 2)
) +
xlab("Priority") +
coord_flip()
names(feedback)
source('U:/dc_public_salaries/dc_salaries.R')
ls()
r
# Extract information using `pdf_data`
pdf_data(
pdf = "U:/dc_public_salaries/Raw Salary Files/public_body_of_employee_information_dec_11.pdf"
# pdf = str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1])
)
salary_files
str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1])
# Extract information using `pdf_data`
pdf_data(
# pdf = "U:/dc_public_salaries/Raw Salary Files/public_body_of_employee_information_dec_11.pdf"
pdf = str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1])
)
# Extract information using `pdf_data`
temp = pdf_data(
# pdf = "U:/dc_public_salaries/Raw Salary Files/public_body_of_employee_information_dec_11.pdf"
pdf = str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1])
)
class(temp)
temp[1]
length(temp)
dim(temp)
View(temp[1])
View(temp[1][[1]])
# Extract information using `pdf_data`
temp = pdf_text(
# pdf = "U:/dc_public_salaries/Raw Salary Files/public_body_of_employee_information_dec_11.pdf"
pdf = str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1])
)
temp
dim(temp)
length(temp)
temp[1]
help(str_split)
View(temp[1])
tibble(text = temp[1])
tibble(text = str_trim(temp[1]))
tibble(text = str_trim(temp[1])) %>%
separate(col = text, into = str_c("v", 1:10), sep = "\r\n")
help("pdf_convert")
rm(list = ls())
# Extract information using `pdf_data`
temp = pdf_data(
# pdf = "U:/dc_public_salaries/Raw Salary Files/public_body_of_employee_information_dec_11.pdf"
pdf = str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1])
)
temp
dim(temp)
dim(temp[1])
length(temp[1])
length(temp)
temp[1]
length(temp[1])
temp[1]
class(temp[1])
class(temp[1][[1]])
temp[920][[1]]
for(l in 1:length(temp)) {
print(length(temp[l]))
}
if(length(temp[l] != 1)) {
print(length(temp[l]))
}
for(l in 1:length(temp)) {
if(length(temp[l] != 1)) {
print(length(temp[l]))
}
}
for(l in 1:length(temp)) {
if(length(temp[l] != 1)) {
print(length(temp[l]))
}
}
l
temp[l]
length(temp[l]
for(l in 1:length(temp)) {
if(length(temp[l]) != 1) {
print(length(temp[l]))
}
}
for(l in 1:length(temp)) {
if(length(temp[l]) != 1) {
print(length(temp[l]))
}
}
temp[920][[1]]
for(l in 1:length(temp)) {
if(length(temp[l]) != 1) {
print(length(temp[l]))
} else {
print(class(temp[l]))
}
}
for(l in 1:length(temp)) {
if(length(temp[l]) != 1) {
print(length(temp[l]))
} else {
print(class(temp[l][[1]]))
}
}
View(temp[2][[1]])
str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1]
)
temp[2][[1]]
temp[2][[1]] %>%
filter(str_detect(text)) %>%
arrange(y)
temp[2][[1]] %>%
# filter(str_detect(text)) %>%
arrange(y)
temp[2][[1]] %>%
# filter(str_detect(text)) %>%
arrange(y) %>%
View()
test = temp[2][[1]] %>%
# filter(str_detect(text)) %>%
arrange(x)
View(test)
temp = pdf_text(
pdf = str_c(getwd(), "/Raw Salary Files/", list.files(str_c(getwd(), "/Raw Salary Files/"))[1])
)
length(temp)
class(temp[1][[1]])
temp[1]
str_split(temp[1], "\r\n")
str_split(temp[1], "\r\n") %>%
tibble()
str_split(temp[1], "\r\n") %>%
unlist()
str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble()
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble()
View(test)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() != 1)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number > 1)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() > 1)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = str_locate(., "Appt"),
appt = str_sub(., 1, appt_end)
)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = max(str_locate(., "Appt")),
appt = str_sub(., 1, appt_end)
)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = max(str_locate(., "Appt"), na.rm = T),
appt = str_sub(., 1, appt_end)
)
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1)
for(r in 1:nrow(test)) {
appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
}
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(appt_end = NA)
for(r in 1:nrow(test)) {
appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
}
for(r in 1:nrow(test)) {
test$appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
}
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(appt_end = NA)
for(r in 1:nrow(test)) {
test$appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
test$appt[r] = str_sub(test$.[r], 1, test$appt_end[r])
}
table(test$appt)
temp$.[1]
test$.[1]
test$.[2]
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = NA,
last_name = NA,
first_name = NA,
title = NA,
salary = NA,
start_date = NA
)
for(r in 1:nrow(test)) {
test$appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
test$appt[r] = str_sub(test$.[r], 1, test$appt_end[r])
test$last_name[r] = str_replace_all(test$.[r], test$appt[r], "")
}
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = NA,
last_name = NA,
first_name = NA,
title = NA,
salary = NA,
start_date = NA
)
for(r in 1:nrow(test)) {
test$appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
test$appt[r] = str_sub(test$.[r], 1, test$appt_end[r])
test$last_name[r] = str_trim(str_replace_all(test$.[r], test$appt[r], ""))
}
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = NA,
last_name = NA,
first_name = NA,
title = NA,
salary = NA,
start_date = NA
)
for(r in 1:nrow(test)) {
test$appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
test$appt[r] = str_sub(test$.[r], 1, test$appt_end[r])
test$last_name[r] = str_replace_all(test$.[r], test$appt[r], "") %>%
str_trim() %>%
str_sub(1, str_locate(test$last_name[r], " "))
}
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = NA,
last_name = NA,
first_name = NA,
title = NA,
salary = NA,
start_date = NA
)
for(r in 1:nrow(test)) {
test$appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
test$appt[r] = str_sub(test$.[r], 1, test$appt_end[r])
test$last_name[r] = str_replace_all(test$.[r], test$appt[r], "") %>%
str_trim() %>%
str_sub(1, min(str_locate(test$last_name[r], " "), na.rm = T))
}
test = str_split(temp[1], "\r\n") %>%
unlist() %>%
tibble() %>%
filter(row_number() >= 1) %>%
mutate(
appt_end = NA,
last_name = NA,
first_name = NA,
title = NA,
salary = NA,
start_date = NA
)
for(r in 1:nrow(test)) {
test$appt_end[r] = max(str_locate(test$.[r], "Appt"), na.rm = T)
test$appt[r] = str_sub(test$.[r], 1, test$appt_end[r])
test$last_name[r] = str_replace_all(test$.[r], test$appt[r], "") %>%
str_trim()
}
